import kotlin.math.abs
import kotlin.math.log
import kotlin.random.Random

//make a list of process class with two properties (how late it arrives, how long it will take)
//both numbers are randomly generated
//convert each class to completed process class with two properties (when it starts, when it finishes)
//add each to new list
fun main() {
    //main function - runs everything
    //runs function runProcess with generateProcess() as input since
    //output of generateProcess() is MutableList<Process> as is input of runProcess
   runProcess(generateProcess())
}
fun rng():Double {
    //generate random number
    //attempted to use log to skew distribution, have not figured it out yet
    val w = log(abs(Random.nextInt().toDouble()), 10.0)
    val x:Double = w
    return x
}

class Process(val arrivalOffset: Double, val productionTime: Double) {
    //Process is the class for a process before it has been processed
    //arrivalOffset - the time it takes for the process to arrive counting from when the previous process finishes
    //productionTime - the time it takes for the process to be processed
    init {
        println("$arrivalOffset, $productionTime")
    }
}

fun generateProcess(): MutableList<Process> {
    //uses rng() function created earlier
    //creates a mutable list (processes) of class Process
    // which it then fills up with 10 items of class Process with rng values
    val processes = mutableListOf<Process>()
    for(i in 1..10){
        val m = Process (rng(), rng())
        processes.add(m)
    }
    return processes
}

class FinProcess(val arrivalTime: Double, val finTime: Double){
    //class to store global start time and end time of processes
    init{
        println("$arrivalTime, $finTime")
    }
}

fun runProcess(processes: MutableList<Process>){
    //simulates processing of Processes
    //adds arrivalOffset and productionTime of members in list processes
    //uses variables m and n to add so that both arrivalTime and finTime can be stored
    //adds new FinProcess to list finProcesses
    val finProcesses = mutableListOf<FinProcess>()
    var m = 0.0
    var n = 0.0
    for(i in 0..9){
        m += processes.get(i).arrivalOffset
        n = m + processes.get(i).productionTime
        val h = FinProcess(m,n)
        m = n
        finProcesses.add(h)
    }
}
